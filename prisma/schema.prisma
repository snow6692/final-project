generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  Gender        GenderType?
  dateOfBirth   DateTime?
  accounts      Account[]
  sessions      Session[]
  images        Image[]
  outfits       Outfit[]
  notifications Notification[]
}

enum GenderType {
  MALE
  FEMALE
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String
  image     String
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id         String   @id @default(uuid())
  url        String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfits    Outfit[]
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  createdAt  DateTime @default(now())
}

model Outfit {
  id        String   @id @default(uuid())
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  images    Image[]
}



model Notification {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
